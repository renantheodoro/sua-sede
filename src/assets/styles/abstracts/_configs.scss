////
/// This file contains all application-wide Sass configuration variables
/// @group configurations
/// @todo Customize to match your design needs.
////

@use "sass:math";

$primary-font-stack: 'Ubuntu';
$roboto-font-stack: 'Roboto', sans-serif !default;

/// Title font stack
///
/// @access public
/// @type list
/// @todo Customize it to match your design needs or use one of the already available [font stacks](#font-stacks). Or do both.
///
/// @example scss
/// $title-font-stack: ComicSans, $basic-title-font-stack;
$title-font-stack: $primary-font-stack !default;

/// Text body font stack
///
/// @access public
/// @type list
/// @todo Customize it to match your design needs or use one of the already available [font stacks](#font-stacks). Or do both.
///
/// @example scss
/// $text-font-stack: ComicSans, $native-font-stack;
$text-font-stack: $roboto-font-stack !default;

/// Font weights map
/// @access private
/// @prop {string} weight - Pure colors or a map of tones
/// @require {function} font-weight
/// @todo Customize the weights or add new ones to match your design needs.
/// @type Map
$font-weights: (
    'text': 400,
    'bold': 600,
    'heading': 600,
);

/// Body text font-size
///
/// @access public
/// @type number
$body-font-size: 1em !default;

/// Default Leading
///
/// @access public
/// @type number
$leading: 3 !default;

/// flexible line heights map
/// @access private
/// @type Map
/// @prop {number} min - minimum line height expressed unitless
/// @prop {number} max - maximum line height expressed unitless
$leadings: (
    'min': 1.15,
    'max': 1.5,
) !default;

/// flexible line length map
///
/// @type Map
/// @prop {number} min - minimum line length expressed in `em`
/// @prop {number} max - maximum line length expressed in `em`
$line-lengths: (
    'min': 21em,
    'max': 35em,
) !default;

///
/// @link http://www.modularscale.com/?1&rem&1.25
$modularscale: (
    base: 1rem,
    ratio: 1.25,
);

/// Default border-radius
/// @todo Customize it to match your design.
/// @type number
$rounded-corner: 8px !default;

/// border default width
/// @todo Customize it to match your design.
/// @type number
$stroke: 1px !default;

/// gutter default width
/// @todo Customize it to match your design.
/// @type number
// $gutter: ($leading * $body-font-size / 1em) * 1rem;
$gutter: ($leading * $body-font-size / 1em) * 1rem;
$gutter-mobile: 1rem;

$column: 8.33%;

@function _im-to-em($breakpoints, $base-value: 16px) {
    $new-breakpoints: ();

    @each $name, $value in $breakpoints {
        $em-value: ($value / $base-value) * 1em;
        $new-breakpoints: map-merge(
            $new-breakpoints,
            (
                $name: $em-value,
            )
        );
    }

    @return $new-breakpoints;
}

/// Breakpoints map
/// @prop {String} keys - Keys are identifiers mapped to a given length
/// @prop {Map} values - Values are actual breakpoints expressed in pixels
$breakpoints: _im-to-em(
    (
        'phone': 320px,
        'max-phablet': 479px,
        'phablet': 480px,
        'max-tablet': 767px,
        'tablet': 768px,
        'max-desktop': 1023px,
        'desktop': 1024px,
        'tablet-portrait': 1366px,
        'wide': 1440px,
    )
) !default;

$toggle-breakpoints: (
    'toggle-table-layout': 48em,
    'toggle-menu': 64em,
);

$breakpoints: map-merge($breakpoints, $toggle-breakpoints);

// 320
// 480
// 760
// 960
// 1200
// 1600.

/// Container's maximum width
/// @type number
$max-width: 67.5rem !default; // 1032px + gutter
$max-width--narrow: 40.75rem; // 668 px

/// Z-indexes map, gathering all Z layers of the application. Avoid to edit it.
/// @access public
/// @type Map
$layers: (
    'modal': 5000,
    'dropdown': 4000,
    'default': 1,
    'below': -1,
);

/// Relative or absolute URL where all assets are served from.
/// @todo Customize it to match your setup.
/// @type String
/// @example scss - When using a CDN
///   $base-url: 'http://cdn.example.com/assets/';
$base-url: '/assets/' !default;

@function _im-to-px($breakpoints, $base-value: 16px) {
    $new-breakpoints: ();

    @each $name, $value in $breakpoints {
        $px-value: if(unit($value) == 'em', ($value / 1em) * $base-value, $value);
        $new-breakpoints: map-merge(
            $new-breakpoints,
            (
                $name: $px-value,
            )
        );

        @if (unit($value) != 'em' and unit($value) != 'px') {
            @error 'all media queries units should be either `em` or `px`. `#{unit($value)}` given.';
        } @else {
            $px-value: if(unit($value) == 'em', ($value / 1em) * $base-value, $value);
            $new-breakpoints: map-merge(
                $new-breakpoints,
                (
                    $name: $px-value,
                )
            );
        }
    }

    @return $new-breakpoints;
}

@if variable-exists('im-media-support') and $im-media-support == false {
    $breakpoints: _im-to-px($breakpoints);
}

/* =======
Typography
======= */

// font size
/*
Default pixel size: 16px
*/

$default-pixel-size: 16px;

// code font-stack
$code-font-stack: Consolas, 'Liberation Mono', Menlo, Courier, monospace !default;